description = "H2O Documentation"

apply plugin: 'java'

dependencies {
    compile project(":h2o-assembly")
}

def runner = new File("$rootDir/h2o-r/tests/run.py").canonicalPath

// REST API Documentation generator
// --------------------------------

def restGenPath = new File("$rootDir/py")

task runGenerateRESTAPIDocs(type: Exec) {
    workingDir restGenPath
    commandLine 'python', runner, '--wipeall', '--baseport', '48000', '--numclouds', '1', '--jvm.xmx', '4g', '--test', 'generate_rest_api_docs.py'
}

task cleanGenerateRESTAPIDocs(type: Delete) {
    delete "$restGenPath/results"
}

build.dependsOn runGenerateRESTAPIDocs
clean.dependsOn cleanGenerateRESTAPIDocs


// Latex Booklets
// --------------

def bookletPath = new File("$rootDir/h2o-docs/src/booklets/v2_2015/source")

task(createBuildInfoTex) << {
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
    File f = new File (bookletPath, "generated_buildinfo.tex");
    StringBuilder sb = new StringBuilder();
    sb.append('%\n')
    sb.append('% Generated by ./gradlew booklets\n')
    sb.append('%\n')
    sb.append('\\newcommand{\\waterVersion}{')
    sb.append(bv.getProjectVersion())
    sb.append('}\n')
    f.write(sb.toString());
}

task compileGlm1(type: Exec, dependsOn: createBuildInfoTex) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'GLM_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileGlm1.out")
}

task compileGlm2(type: Exec, dependsOn: compileGlm1) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'GLM_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileGlm2.out")
}

task compileDl1(type: Exec, dependsOn: createBuildInfoTex) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'DeepLearning_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileDl1.out")
}

task compileDl2(type: Exec, dependsOn: compileDl1) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'DeepLearning_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileDl2.out")
}

task compileGbm1(type: Exec, dependsOn: createBuildInfoTex) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'GBM_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileGbm1.out")
}

task compileGbm2(type: Exec, dependsOn: compileGbm1) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'GBM_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileGbm2.out")
}

task compileR1(type: Exec, dependsOn: createBuildInfoTex) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'R_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileR1.out")
}

task compileR2(type: Exec, dependsOn: compileR1) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'R_Vignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileR2.out")
}

task compileSw1(type: Exec, dependsOn: createBuildInfoTex) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'SparklingWaterVignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileSw1.out")
}

task compileSw2(type: Exec, dependsOn: compileSw1) {
    workingDir bookletPath
    commandLine 'pdflatex', '-halt-on-error', 'SparklingWaterVignette.tex'
    standardOutput = new FileOutputStream("$bookletPath/compileSw2.out")
}

task compileBooklets(dependsOn: [compileGlm2, compileDl2, compileGbm2, compileR2, compileSw2])

task cleanBooklets << {
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.pdf')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.blg')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.log')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.aux')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.toc')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.synctex') }
    ant.delete() { fileset(dir: file(bookletPath), includes: 'generated_buildinfo.tex') }
}

task booklets(dependsOn: compileBooklets)

clean.dependsOn cleanBooklets
